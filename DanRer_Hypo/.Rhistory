} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
}
}
}
# Append species idents + combine lists + remove lowbounds
table1$Var.1 <- paste(as.character(species), table1$Var.1, sep = "_")
table1$Var.2 <- paste("int", table1$Var.2, sep = "_")
table2$Var.1 <- paste("int", table2$Var.1, sep = "_")
table2$Var.2 <- paste(as.character(species.2), table2$Var.2, sep = "_")
table <- rbind(table1, table2)
table <- table[table$value > plot.cut,]
# Make nodes list
nodes <- union(as.character(table$Var.2), as.character(table$Var.1))
nodes <- as.data.frame(nodes)
# Fix node levels
table$Var1 <- as.numeric(plyr::mapvalues(x = table$Var.1, from = nodes$nodes, to = row.names(nodes)))-1
table$Var2 <- as.numeric(plyr::mapvalues(x = table$Var.2, from = nodes$nodes, to = row.names(nodes)))-1
if (remove.non == TRUE) {
cluster <- paste(species, cluster, sep = "_")
table <- table[c(seq(1:length(table$Var.1))[table$Var.1 %in% cluster], grep("int", table$Var.1)),]
}
return(sankeyNetwork(Links = table, Nodes = nodes, Source = "Var1", Target = "Var2", Value = "value", NodeID = "nodes", units = "cells", fontSize = 8, nodeWidth = 40, nodePadding = 10, iterations = 10000, sinksRight = F))
}
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T)
plotSankey <- function(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 10, remove.non = F, ...) {
if (species == "astyanax") {
species.2 <- "zebrafish"
} else {
species.2 <- "astyanax"
}
# Identify the integrated IDs that the target cluster maps to
if (cluster %in% unique(object@meta.data$SubclusterType)) {
res <- "SubclusterType"
Idents(object) <- "integrated_SubclusterType"
if (length(cluster) == 1) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster, "integrated_SubclusterType"])
}
if (length(cluster) > 1) {
subset.names <- list()
for (i in 1:length(cluster)) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster[[i]], "integrated_SubclusterType"])
subset.names[[i]] <- names(table[table > sum(table)/sum.div])
}
subset.names <- unlist(subset.names)
}
}
if (cluster %in% unique(object@meta.data$Subtype)) {
res <- "Subtype"
Idents(object) <- "integrated_Subtype"
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$Subtype %in% cluster, "integrated_Subtype"])
}
# Subset object to mapped integrated IDs
#subset.names <- names(table[table > sum(table)/20]) # The problem: if using multiple idents, this should be normalized for the size of each
print("Integrated identities used for plotting")
print(subset.names)
object <- subset(object, idents = subset.names)
# Extract the count tables
if (res == "SubclusterType") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
}
}
}
if (res == "Subtype") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
}
}
}
# Append species idents + combine lists + remove lowbounds
table1$Var.1 <- paste(as.character(species), table1$Var.1, sep = "_")
table1$Var.2 <- paste("int", table1$Var.2, sep = "_")
table2$Var.1 <- paste("int", table2$Var.1, sep = "_")
table2$Var.2 <- paste(as.character(species.2), table2$Var.2, sep = "_")
table <- rbind(table1, table2)
table <- table[table$value > plot.cut,]
# Make nodes list
nodes <- union(as.character(table$Var.2), as.character(table$Var.1))
nodes <- as.data.frame(nodes)
# Fix node levels
table$Var1 <- as.numeric(plyr::mapvalues(x = table$Var.1, from = nodes$nodes, to = row.names(nodes)))-1
table$Var2 <- as.numeric(plyr::mapvalues(x = table$Var.2, from = nodes$nodes, to = row.names(nodes)))-1
if (remove.non == TRUE) {
cluster <- paste(species, cluster, sep = "_")
table <- table[c(seq(1:length(table$Var.1))[table$Var.1 %in% cluster], grep("int", table$Var.1)),]
}
return(sankeyNetwork(Links = table, Nodes = nodes, Source = "Var1", Target = "Var2", Value = "value", NodeID = "nodes", units = "cells", fontSize = 8, nodeWidth = 40, nodePadding = 10, iterations = 10000, sinksRight = F))
}
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T)
plotSankey <- function(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 10, remove.non = F, ...) {
if (species == "astyanax") {
species.2 <- "zebrafish"
} else {
species.2 <- "astyanax"
}
# Identify the integrated IDs that the target cluster maps to
if (cluster %in% unique(object@meta.data$SubclusterType)) {
res <- "SubclusterType"
Idents(object) <- "integrated_SubclusterType"
if (length(cluster) == 1) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster, "integrated_SubclusterType"])
}
if (length(cluster) > 1) {
subset.names <- list()
for (i in 1:length(cluster)) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster[[i]], "integrated_SubclusterType"])
subset.names[[i]] <- names(table[table > sum(table)/sum.div])
}
subset.names <- unlist(subset.names)
}
}
if (cluster %in% unique(object@meta.data$Subtype)) {
res <- "Subtype"
Idents(object) <- "integrated_Subtype"
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$Subtype %in% cluster, "integrated_Subtype"])
}
# Subset object to mapped integrated IDs
#subset.names <- names(table[table > sum(table)/20]) # The problem: if using multiple idents, this should be normalized for the size of each
print("Integrated identities used for plotting")
print(subset.names)
object <- subset(object, idents = subset.names)
# Extract the count tables
if (res == "SubclusterType") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
}
}
}
if (res == "Subtype") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
}
}
}
# Append species idents + combine lists + remove lowbounds
table1$Var.1 <- paste(as.character(species), table1$Var.1, sep = "_")
table1$Var.2 <- paste("int", table1$Var.2, sep = "_")
table2$Var.1 <- paste("int", table2$Var.1, sep = "_")
table2$Var.2 <- paste(as.character(species.2), table2$Var.2, sep = "_")
table <- rbind(table1, table2)
table <- table[table$value > plot.cut,]
# Make nodes list
nodes <- union(as.character(table$Var.2), as.character(table$Var.1))
nodes <- as.data.frame(nodes)
# Fix node levels
table$Var1 <- as.numeric(plyr::mapvalues(x = table$Var.1, from = nodes$nodes, to = row.names(nodes)))-1
table$Var2 <- as.numeric(plyr::mapvalues(x = table$Var.2, from = nodes$nodes, to = row.names(nodes)))-1
if (remove.non == TRUE) {
cluster <- paste(species, cluster, sep = "_")
table <- table[c(seq(1:length(table$Var.1))[table$Var.1 %in% cluster], grep("int", table$Var.1)),]
}
return(sankeyNetwork(Links = table, Nodes = nodes, Source = "Var1", Target = "Var2", Value = "value", NodeID = "nodes", units = "cells", iterations = 10000, sinksRight = F))
}
plotSankey(object = hypo.integrated, species = "astyanax", cluster = surface.names, sum.div = 10, plot.cut = 20, remove.non = T)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 8, nodeWidth = 40, nodePadding = 10)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10)
plotSankey <- function(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 10, remove.non = F, ...) {
if (species == "astyanax") {
species.2 <- "zebrafish"
} else {
species.2 <- "astyanax"
}
# Identify the integrated IDs that the target cluster maps to
if (cluster %in% unique(object@meta.data$SubclusterType)) {
res <- "SubclusterType"
Idents(object) <- "integrated_SubclusterType"
if (length(cluster) == 1) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster, "integrated_SubclusterType"])
}
if (length(cluster) > 1) {
subset.names <- list()
for (i in 1:length(cluster)) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster[[i]], "integrated_SubclusterType"])
subset.names[[i]] <- names(table[table > sum(table)/sum.div])
}
subset.names <- unlist(subset.names)
}
}
if (cluster %in% unique(object@meta.data$Subtype)) {
res <- "Subtype"
Idents(object) <- "integrated_Subtype"
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$Subtype %in% cluster, "integrated_Subtype"])
}
# Subset object to mapped integrated IDs
#subset.names <- names(table[table > sum(table)/20]) # The problem: if using multiple idents, this should be normalized for the size of each
print("Integrated identities used for plotting")
print(subset.names)
object <- subset(object, idents = subset.names)
# Extract the count tables
if (res == "SubclusterType") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
}
}
}
if (res == "Subtype") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
}
}
}
# Append species idents + combine lists + remove lowbounds
table1$Var.1 <- paste(as.character(species), table1$Var.1, sep = "_")
table1$Var.2 <- paste("int", table1$Var.2, sep = "_")
table2$Var.1 <- paste("int", table2$Var.1, sep = "_")
table2$Var.2 <- paste(as.character(species.2), table2$Var.2, sep = "_")
table <- rbind(table1, table2)
table <- table[table$value > plot.cut,]
# Make nodes list
nodes <- union(as.character(table$Var.2), as.character(table$Var.1))
nodes <- as.data.frame(nodes)
# Fix node levels
table$Var1 <- as.numeric(plyr::mapvalues(x = table$Var.1, from = nodes$nodes, to = row.names(nodes)))-1
table$Var2 <- as.numeric(plyr::mapvalues(x = table$Var.2, from = nodes$nodes, to = row.names(nodes)))-1
if (remove.non == TRUE) {
cluster <- paste(species, cluster, sep = "_")
table <- table[c(seq(1:length(table$Var.1))[table$Var.1 %in% cluster], grep("int", table$Var.1)),]
}
return(sankeyNetwork(Links = table, Nodes = nodes, Source = "Var1", Target = "Var2", Value = "value", NodeID = "nodes", units = "cells", iterations = 10000, sinksRight = F, ...))
}
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 800, width = 800)
plotSankey <- function(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 10, remove.non = F, ...) {
if (species == "astyanax") {
species.2 <- "zebrafish"
} else {
species.2 <- "astyanax"
}
# Identify the integrated IDs that the target cluster maps to
if (cluster %in% unique(object@meta.data$SubclusterType)) {
res <- "SubclusterType"
Idents(object) <- "integrated_SubclusterType"
if (length(cluster) == 1) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster, "integrated_SubclusterType"])
}
if (length(cluster) > 1) {
subset.names <- list()
for (i in 1:length(cluster)) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster[[i]], "integrated_SubclusterType"])
subset.names[[i]] <- names(table[table > sum(table)/sum.div])
}
subset.names <- unlist(subset.names)
}
}
if (cluster %in% unique(object@meta.data$Subtype)) {
res <- "Subtype"
Idents(object) <- "integrated_Subtype"
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$Subtype %in% cluster, "integrated_Subtype"])
}
# Subset object to mapped integrated IDs
#subset.names <- names(table[table > sum(table)/20]) # The problem: if using multiple idents, this should be normalized for the size of each
print("Integrated identities used for plotting")
print(subset.names)
object <- subset(object, idents = subset.names)
# Extract the count tables
if (res == "SubclusterType") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
}
}
}
if (res == "Subtype") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
}
}
}
# Append species idents + combine lists + remove lowbounds
table1$Var.1 <- paste(as.character(species), table1$Var.1, sep = "_")
table1$Var.2 <- paste("int", table1$Var.2, sep = "_")
table2$Var.1 <- paste("int", table2$Var.1, sep = "_")
table2$Var.2 <- paste(as.character(species.2), table2$Var.2, sep = "_")
table <- rbind(table1, table2)
table <- table[table$value > plot.cut,]
if (remove.non == TRUE) {
cluster <- paste(species, cluster, sep = "_")
table <- table[c(seq(1:length(table$Var.1))[table$Var.1 %in% cluster], grep("int", table$Var.1)),]
}
# Make nodes list
nodes <- union(as.character(table$Var.2), as.character(table$Var.1))
nodes <- as.data.frame(nodes)
# Fix node levels
table$Var1 <- as.numeric(plyr::mapvalues(x = table$Var.1, from = nodes$nodes, to = row.names(nodes)))-1
table$Var2 <- as.numeric(plyr::mapvalues(x = table$Var.2, from = nodes$nodes, to = row.names(nodes)))-1
return(sankeyNetwork(Links = table, Nodes = nodes, Source = "Var1", Target = "Var2", Value = "value", NodeID = "nodes", units = "cells", iterations = 10000, sinksRight = F, ...))
}
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 800, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = surface.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 800, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 800, width = 800)
plotSankey <- function(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 10, remove.non = F, ...) {
if (species == "astyanax") {
species.2 <- "zebrafish"
} else {
species.2 <- "astyanax"
}
# Identify the integrated IDs that the target cluster maps to
if (cluster %in% unique(object@meta.data$SubclusterType)) {
res <- "SubclusterType"
Idents(object) <- "integrated_SubclusterType"
if (length(cluster) == 1) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster, "integrated_SubclusterType"])
subset.names <- names(table[table > sum(table)/sum.div])
}
if (length(cluster) > 1) {
subset.names <- list()
for (i in 1:length(cluster)) {
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$SubclusterType %in% cluster[[i]], "integrated_SubclusterType"])
subset.names[[i]] <- names(table[table > sum(table)/sum.div])
}
subset.names <- unlist(subset.names)
}
}
if (cluster %in% unique(object@meta.data$Subtype)) {
res <- "Subtype"
Idents(object) <- "integrated_Subtype"
table <- table(object@meta.data[object@meta.data$species.2 == species & object@meta.data$Subtype %in% cluster, "integrated_Subtype"])
}
# Subset object to mapped integrated IDs
#subset.names <- names(table[table > sum(table)/20]) # The problem: if using multiple idents, this should be normalized for the size of each
print("Integrated identities used for plotting")
print(subset.names)
object <- subset(object, idents = subset.names)
# Extract the count tables
if (res == "SubclusterType") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "SubclusterType"], object@meta.data[object@meta.data$species.2 == species,"integrated_SubclusterType"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_SubclusterType"], object@meta.data[object@meta.data$species.2 != species,"SubclusterType"]))
}
}
}
if (res == "Subtype") {
if (!(species %in% object@meta.data$species.2)) {
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
table1 <- table2
table1$value <- 0
print(paste(cluster, "does not exist in", species, sep = " "))
} else {
if (!(species.2 %in% object@meta.data$species.2)) {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- table1
table2$value <- 0
print(paste(cluster, "does not exist in", species.2, sep = " "))
} else {
table1 <- melt(table(object@meta.data[object@meta.data$species.2 == species, "Subtype"], object@meta.data[object@meta.data$species.2 == species,"integrated_Subtype"]))
table2 <- melt(table(object@meta.data[object@meta.data$species.2 != species, "integrated_Subtype"], object@meta.data[object@meta.data$species.2 != species,"Subtype"]))
}
}
}
# Append species idents + combine lists + remove lowbounds
table1$Var.1 <- paste(as.character(species), table1$Var.1, sep = "_")
table1$Var.2 <- paste("int", table1$Var.2, sep = "_")
table2$Var.1 <- paste("int", table2$Var.1, sep = "_")
table2$Var.2 <- paste(as.character(species.2), table2$Var.2, sep = "_")
table <- rbind(table1, table2)
table <- table[table$value > plot.cut,]
if (remove.non == TRUE) {
cluster <- paste(species, cluster, sep = "_")
table <- table[c(seq(1:length(table$Var.1))[table$Var.1 %in% cluster], grep("int", table$Var.1)),]
}
# Make nodes list
nodes <- union(as.character(table$Var.2), as.character(table$Var.1))
nodes <- as.data.frame(nodes)
# Fix node levels
table$Var1 <- as.numeric(plyr::mapvalues(x = table$Var.1, from = nodes$nodes, to = row.names(nodes)))-1
table$Var2 <- as.numeric(plyr::mapvalues(x = table$Var.2, from = nodes$nodes, to = row.names(nodes)))-1
return(sankeyNetwork(Links = table, Nodes = nodes, Source = "Var1", Target = "Var2", Value = "value", NodeID = "nodes", units = "cells", iterations = 10000, sinksRight = F, ...))
}
plotSankey(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 800, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 20, remove.non = F, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 800, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 800, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = surface.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 800, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = "GABA_7_2", sum.div = 10, plot.cut = 20, remove.non = F, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 600, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 600, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 300, width = 800)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = cave.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 300, width = 600)
plotSankey(object = hypo.integrated, species = "astyanax", cluster = surface.names, sum.div = 10, plot.cut = 20, remove.non = T, fontSize = 12, nodeWidth = 40, nodePadding = 10, height = 300, width = 600)
library(Seurat)
library(Matrix)
library(dplyr)
library(tidyr)
library(reshape2)
setwd("/Volumes/BZ/Home/gizevo30/R_Projects/Cavefish_Paper/DanRer_Hypo")
hypo <- readRDS("DanRer_65k.rds")
gene.lists <- readRDS("marker_gene_lists.rds")
Idents(hypo) <- "SubclusterType"
subcluster.markers <- lapply(Idents(hypo), function(x) FindMarkers(hypo, ident.1 = x, verbose = T, max.cells.per.ident = 500))
names(subcluster.markers) <- index
gene.lists[[2]] <- subcluster.markers
saveRDS(gene.lists, file = "marker_gene_lists.rds")
print("done SubclusterType markers")
Idents(hypo) <- "SubclusterType"
levels(Idents(hypo))
length(gene.lists)
Idents(hypo) <- "SubclusterType"
subcluster.markers <- lapply(levels(Idents(hypo)), function(x) FindMarkers(hypo, ident.1 = x, verbose = T, max.cells.per.ident = 500))
names(subcluster.markers) <- index
gene.lists[[2]] <- subcluster.markers
saveRDS(gene.lists, file = "marker_gene_lists.rds")
print("done SubclusterType markers")
names(subcluster.markers) <- levels(Idents(hypo))
gene.lists[[2]] <- subcluster.markers
saveRDS(gene.lists, file = "marker_gene_lists.rds")
print("done SubclusterType markers")
