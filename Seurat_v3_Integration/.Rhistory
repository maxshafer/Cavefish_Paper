matrix.ast2zeb.sub <- list()
for (i in 1:length(trinarized.exp$subcluster.astyanax)) {
matrix.ast2zeb.sub[[i]] <- lapply(trinarized.exp$subcluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$subcluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[11]] <- matrix.ast2zeb.sub
names(SI.list) <- c("SI", "SI.sub", "SI.ast", "SI.ast.sub", "SI.sub.GO", "SI.zeb2zeb", "SI.ast2ast", "SI.zeb2zeb.sub", "SI.ast2ast.sub", "SI.ast2zeb", "SI.ast2zeb.sub")
SI <- SI.list[[1]]
SI.sub <- SI.list[[2]]
SI.ast <- SI.list[[3]]
SI.ast.sub <- SI.list[[4]]
colnames(SI.sub) <- c("Subcluster", "values", "Cluster")
## Make comparison figure SI between zeb-ast and cave-surface
SI.combined <- rbind(SI, SI.ast)
SI.combined$species <- c(rep("Between species", nrow(SI)), rep("Between species-morphs", nrow(SI.ast)))
species.SI <- ggplot(SI.combined, aes(x = species, y = values, colour = species, group = species)) + geom_jitter() + geom_boxplot(outlier.color = NA, fill = "transparent", color = "black") + scale_color_viridis_d() + theme_classic() + ylim(c(0,1)) + scale_colour_viridis_d()
species.SI <- species.SI + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8), axis.title.x = element_blank())+ ylab(expression(paste("Similarity Index (", italic("SI"), ")")))
SI.combined.sub <- rbind(SI.sub, SI.ast.sub)
SI.combined.sub$species <- c(rep("Between species", nrow(SI.sub)), rep("Between species-morphs", nrow(SI.ast.sub)))
species.SI.sub <- ggplot(SI.combined.sub, aes(x = species, y = values, colour = species, group = species)) + geom_jitter(size = 0.5) + geom_boxplot(outlier.color = NA, fill = "transparent", color = "black") + scale_color_viridis_d() + theme_classic() + ylim(c(0,1)) + scale_colour_viridis_d()
species.SI.sub <- species.SI.sub + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8), axis.title.x = element_blank())+ ylab(expression(paste("Similarity Index (", italic("SI"), ")"))) + NoLegend()
dev.new()
species.SI.sub
## Plot progenitors versus neurons
SI.sub$Neuronal <- "Neuronal"
SI.sub$Neuronal[grepl("Progenitors", SI.sub$Subcluster)] <- "Progenitors"
SI.sub$Neuronal <- factor(SI.sub$Neuronal, levels = c("Progenitors", "Neuronal"))
neuronal <- ggplot(as.data.frame(SI.sub), aes(x = Neuronal, y = values, group = Neuronal, color = Neuronal)) + geom_jitter(size = 0.5) + geom_boxplot(outlier.color = NA, fill = "transparent", color = "black") + scale_color_viridis_d() + theme_classic()
neuronal <- neuronal + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8), axis.title.x = element_blank())+ ylab(expression(paste("Similarity Index (", italic("SI"), ")")))
SI.compare <- data.frame(cell_type = SI$Cluster, cluster = SI$values, cell_types = aggregate(SI.sub[,2], list(SI.sub$Cluster), mean)[,2])
cluster <- ggplot(reshape::melt(SI.compare), aes(x = variable, y = value, group = cell_type, color = cell_type)) + geom_jitter(size = 0.5) + geom_line(aes(group = cell_type), colour = "grey75") + geom_boxplot(aes(group = variable),outlier.color = NA, fill = "transparent", color = "black") + theme_classic() + theme(legend.position = "none")
cluster <- cluster + scale_x_discrete(labels=c("cluster" = "Cluster", "cell_types" = "Subcluster")) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8), axis.title.x = element_blank())+ ylab(expression(paste("Similarity Index (", italic("SI"), ")")))
dev.new()
neuronal + cluster
t.test(SI.sub[SI.sub$Neuronal == "Neuronal", "values"], SI.sub[SI.sub$Neuronal == "Progenitors", "values"])
t.test(SI.compare$cell_types, SI.compare$cluster, paired = T)
f = 0.35
## Load trinarized gene lists
trinarized.genes <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,".rds", sep = ""))
trinarized.exp <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = ""))
# Find housekeeping genes
trinarized.hk <- trinarized.genes
hk <- list()
trinarized.hk$cluster.zebrafish <- Reduce(cbind, trinarized.hk$cluster.zebrafish)
trinarized.hk$cluster.zebrafish <- trinarized.hk$cluster.zebrafish > 0.95
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))]
trinarized.hk$cluster.astyanax <- Reduce(cbind, trinarized.hk$cluster.astyanax)
trinarized.hk$cluster.astyanax <- trinarized.hk$cluster.astyanax > 0.95
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))]
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) length(x[x]) > length(x)*.4)]
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) length(x[x]) > length(x)*.4)]
rm(trinarized.hk)
# Remove from lists
trinarized.exp[c(1,5,7)] <- lapply(trinarized.exp[c(1,5,7)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[1]]))]))
trinarized.exp[c(2:4,6,8:10)] <- lapply(trinarized.exp[c(2:4,6,8:10)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[2]]))]))
## Calculate the similarity index!
## Takes 2 lists of marker genes, speices.1 and species.2
## Takes the intersection of both Cluster names, and subset/order lists by that
## Then run Similarity Index caculation for each Cluster
calcDriftIndex <- function(species.1 = species.1, species.2 = species.2, subset = NULL, invert = FALSE) {
names <- Reduce(intersect, list(names(species.1), names(species.2)))
conserved <- lapply(names, function(x) intersect(names(species.1[[x]]), names(species.2[[x]])))
species.1 <- lapply(names, function(x) names(species.1[[x]]))
species.2 <- lapply(names, function(x) names(species.2[[x]]))
DI <- list()
if (is.null(subset)) {
DI <- lapply(seq_along(conserved), function(x) 1 - sqrt( (1 - (length(conserved[[x]]) / length(species.1[[x]]))) * (1 - (length(conserved[[x]]) / length(species.2[[x]]))) ))
} else {
if (invert == FALSE) {
DI <- lapply(seq_along(conserved), function(x) 1 - sqrt( (1 - (length(conserved[[x]][conserved[[x]] %in% subset]) / length(species.1[[x]][species.1[[x]] %in% subset]))) * (1 - (length(conserved[[x]][conserved[[x]] %in% subset]) / length(species.2[[x]][species.2[[x]] %in% subset])) )))
} else {
DI <- lapply(seq_along(conserved), function(x) 1 - sqrt( (1 - (length(conserved[[x]][!(conserved[[x]] %in% subset)]) / length(species.1[[x]][!(species.1[[x]] %in% subset)]))) * (1 - (length(conserved[[x]][!(conserved[[x]] %in% subset)]) / length(species.2[[x]][!(species.2[[x]] %in% subset)])) ) ))
}
}
names(DI) <- names
return(DI)
}
## For Clusters
trin.SI.Clusters <- calcDriftIndex(species.1 = trinarized.exp$cluster.zebrafish, species.2 = trinarized.exp$cluster.astyanax)
SI <- data.frame(Cluster = names(trin.SI.Clusters), values = unlist(trin.SI.Clusters))
trin.SI.Clusters.ast <- calcDriftIndex(species.1 = trinarized.exp$cluster.zebrafish, species.2 = trinarized.exp$cluster.astyanax)
SI.ast <- data.frame(Cluster = c(names(unlist(trin.SI.Clusters.ast))), values = c(unlist(trin.SI.Clusters.ast)))
## For Subclusters
trin.SI.Subclusters <- calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax)
SI.sub <- data.frame(Subcluster = c(names(unlist(trin.SI.Subclusters))), values = c(unlist(trin.SI.Subclusters)))
trin.SI.Subclusters.ast <- calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax)
SI.ast.sub <- data.frame(Subcluster = c(names(unlist(trin.SI.Subclusters.ast))), values = c(unlist(trin.SI.Subclusters.ast)))
# OK, add Cluster as a column to subcluster df
index <- unique(data.frame(Cluster = hypo.integrated@meta.data$integrated_Cluster, Subcluster = hypo.integrated@meta.data$integrated_Subcluster))
SI.sub$Cluster <- index$Cluster[match(SI.sub$Subcluster, index$Subcluster)]
SI.sub$Cluster <- factor(SI.sub$Cluster, levels = levels(hypo.integrated@meta.data$integrated_Cluster))
index.ast <- unique(tibble(Cluster = hypo.integrated.ast@meta.data$integrated_Cluster, Subcluster = hypo.integrated.ast@meta.data$integrated_Subcluster))
SI.ast.sub$Cluster <- index.ast$Cluster[match(SI.ast.sub$Subcluster, index.ast$Subcluster)]
SI.ast.sub$Cluster <- factor(SI.ast.sub$Cluster, levels = levels(hypo.integrated@meta.data$integrated_Cluster))
# Caculate similarity for only TFs, NPS/NTS etc
# Get Go lists and use only those that are marker genes
go_lists <- list.files("../Seurat_v3_Integration/SCENIC")[grep("GO", list.files("../Seurat_v3_Integration/SCENIC"))]
go_lists <- lapply(paste("../Seurat_v3_Integration/SCENIC/", go_lists, sep = ""), function(x) read.csv(x, head = F))
go_lists <- lapply(go_lists, function(x) unique(x$V2))
names(go_lists) <- list.files("../Seurat_v3_Integration/SCENIC")[grep("GO", list.files("../Seurat_v3_Integration/SCENIC"))]
names(go_lists)
go_lists[[13]] <- Reduce(union, list(go_lists[[5]], go_lists[[6]], go_lists[[9]]))
## Plot Subtypes
SI2 <- tibble(cell_type = c(names(trinarized.exp$subcluster.zebrafish)), all = c(unlist(calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax, invert = F))), TFs = c(unlist(calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax, subset = go_lists[[3]], invert = F))), NP_NTS = c(unlist(calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax, subset = go_lists[[13]], invert = F))))
SI2 <- SI2[!is.na(SI2$NP_NTS),]
SI.sub.GO <- reshape2::melt(SI2)
SI.sub.GO$variable <- factor(SI.sub.GO$variable, levels = c("all", "NP_NTS", "TFs"))
SI.sub.GO$value[is.infinite(SI.sub.GO$value)] <- 0
## Save
SI.list <- list(SI, SI.sub, SI.ast, SI.ast.sub, SI.sub.GO)
names(SI.list) <- c("SI", "SI.sub", "SI.ast", "SI.ast.sub", "SI.sub.GO")
matrix.zeb <- list()
for (i in 1:length(trinarized.exp$cluster.zebrafish)) {
matrix.zeb[[i]] <- lapply(trinarized.exp$cluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$cluster.zebrafish[[i]], cell_type2 = x))
}
SI.list[[6]] <- matrix.zeb
matrix.ast <- list()
for (i in 1:length(trinarized.exp$cluster.astyanax)) {
matrix.ast[[i]] <- lapply(trinarized.exp$cluster.astyanax, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$cluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[7]] <- matrix.ast
matrix.zeb.sub <- list()
for (i in 1:length(trinarized.exp$subcluster.zebrafish)) {
matrix.zeb.sub[[i]] <- lapply(trinarized.exp$subcluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$subcluster.zebrafish[[i]], cell_type2 = x))
}
SI.list[[8]] <- matrix.zeb.sub
matrix.ast.sub <- list()
for (i in 1:length(trinarized.exp$subcluster.astyanax)) {
matrix.ast.sub[[i]] <- lapply(trinarized.exp$subcluster.astyanax, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$subcluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[9]] <- matrix.ast.sub
matrix.ast2zeb <- list()
for (i in 1:length(trinarized.exp$cluster.astyanax)) {
matrix.ast2zeb[[i]] <- lapply(trinarized.exp$cluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$cluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[10]] <- matrix.ast2zeb
matrix.ast2zeb.sub <- list()
for (i in 1:length(trinarized.exp$subcluster.astyanax)) {
matrix.ast2zeb.sub[[i]] <- lapply(trinarized.exp$subcluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$subcluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[11]] <- matrix.ast2zeb.sub
names(SI.list) <- c("SI", "SI.sub", "SI.ast", "SI.ast.sub", "SI.sub.GO", "SI.zeb2zeb", "SI.ast2ast", "SI.zeb2zeb.sub", "SI.ast2ast.sub", "SI.ast2zeb", "SI.ast2zeb.sub")
SI <- SI.list[[1]]
SI.sub <- SI.list[[2]]
SI.ast <- SI.list[[3]]
SI.ast.sub <- SI.list[[4]]
colnames(SI.sub) <- c("Subcluster", "values", "Cluster")
## Make comparison figure SI between zeb-ast and cave-surface
SI.combined <- rbind(SI, SI.ast)
SI.combined$species <- c(rep("Between species", nrow(SI)), rep("Between species-morphs", nrow(SI.ast)))
species.SI <- ggplot(SI.combined, aes(x = species, y = values, colour = species, group = species)) + geom_jitter() + geom_boxplot(outlier.color = NA, fill = "transparent", color = "black") + scale_color_viridis_d() + theme_classic() + ylim(c(0,1)) + scale_colour_viridis_d()
species.SI <- species.SI + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8), axis.title.x = element_blank())+ ylab(expression(paste("Similarity Index (", italic("SI"), ")")))
SI.combined.sub <- rbind(SI.sub, SI.ast.sub)
SI.combined.sub$species <- c(rep("Between species", nrow(SI.sub)), rep("Between species-morphs", nrow(SI.ast.sub)))
species.SI.sub <- ggplot(SI.combined.sub, aes(x = species, y = values, colour = species, group = species)) + geom_jitter(size = 0.5) + geom_boxplot(outlier.color = NA, fill = "transparent", color = "black") + scale_color_viridis_d() + theme_classic() + ylim(c(0,1)) + scale_colour_viridis_d()
species.SI.sub <- species.SI.sub + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8), axis.title.x = element_blank())+ ylab(expression(paste("Similarity Index (", italic("SI"), ")"))) + NoLegend()
dev.new()
species.SI.sub
f
## Plot progenitors versus neurons
SI.sub$Neuronal <- "Neuronal"
SI.sub$Neuronal[grepl("Progenitors", SI.sub$Subcluster)] <- "Progenitors"
SI.sub$Neuronal <- factor(SI.sub$Neuronal, levels = c("Progenitors", "Neuronal"))
neuronal <- ggplot(as.data.frame(SI.sub), aes(x = Neuronal, y = values, group = Neuronal, color = Neuronal)) + geom_jitter(size = 0.5) + geom_boxplot(outlier.color = NA, fill = "transparent", color = "black") + scale_color_viridis_d() + theme_classic()
neuronal <- neuronal + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8), axis.title.x = element_blank())+ ylab(expression(paste("Similarity Index (", italic("SI"), ")")))
SI.compare <- data.frame(cell_type = SI$Cluster, cluster = SI$values, cell_types = aggregate(SI.sub[,2], list(SI.sub$Cluster), mean)[,2])
cluster <- ggplot(reshape::melt(SI.compare), aes(x = variable, y = value, group = cell_type, color = cell_type)) + geom_jitter(size = 0.5) + geom_line(aes(group = cell_type), colour = "grey75") + geom_boxplot(aes(group = variable),outlier.color = NA, fill = "transparent", color = "black") + theme_classic() + theme(legend.position = "none")
cluster <- cluster + scale_x_discrete(labels=c("cluster" = "Cluster", "cell_types" = "Subcluster")) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8), axis.title.x = element_blank())+ ylab(expression(paste("Similarity Index (", italic("SI"), ")")))
dev.new()
neuronal + cluster
t.test(SI.sub[SI.sub$Neuronal == "Neuronal", "values"], SI.sub[SI.sub$Neuronal == "Progenitors", "values"])
t.test(SI.compare$cell_types, SI.compare$cluster, paired = T)
f = 0.1
f = 0.1
## Load trinarized gene lists
trinarized.genes <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,".rds", sep = ""))
trinarized.exp <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = ""))
# Find housekeeping genes
trinarized.hk <- trinarized.genes
hk <- list()
trinarized.hk$cluster.zebrafish <- Reduce(cbind, trinarized.hk$cluster.zebrafish)
trinarized.hk$cluster.zebrafish <- trinarized.hk$cluster.zebrafish > 0.95
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))]
trinarized.hk$cluster.astyanax <- Reduce(cbind, trinarized.hk$cluster.astyanax)
trinarized.hk$cluster.astyanax <- trinarized.hk$cluster.astyanax > 0.95
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))]
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) length(x[x]) > length(x)*.4)]
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) length(x[x]) > length(x)*.4)]
rm(trinarized.hk)
trinarized.exp[c(1,5,7)] <- lapply(trinarized.exp[c(1,5,7)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[1]]))]))
trinarized.exp[c(2:4,6,8:10)] <- lapply(trinarized.exp[c(2:4,6,8:10)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[2]]))]))
## Calculate the similarity index!
## Takes 2 lists of marker genes, speices.1 and species.2
## Takes the intersection of both Cluster names, and subset/order lists by that
## Then run Similarity Index caculation for each Cluster
calcDriftIndex <- function(species.1 = species.1, species.2 = species.2, subset = NULL, invert = FALSE) {
names <- Reduce(intersect, list(names(species.1), names(species.2)))
conserved <- lapply(names, function(x) intersect(names(species.1[[x]]), names(species.2[[x]])))
species.1 <- lapply(names, function(x) names(species.1[[x]]))
species.2 <- lapply(names, function(x) names(species.2[[x]]))
DI <- list()
if (is.null(subset)) {
DI <- lapply(seq_along(conserved), function(x) 1 - sqrt( (1 - (length(conserved[[x]]) / length(species.1[[x]]))) * (1 - (length(conserved[[x]]) / length(species.2[[x]]))) ))
} else {
if (invert == FALSE) {
DI <- lapply(seq_along(conserved), function(x) 1 - sqrt( (1 - (length(conserved[[x]][conserved[[x]] %in% subset]) / length(species.1[[x]][species.1[[x]] %in% subset]))) * (1 - (length(conserved[[x]][conserved[[x]] %in% subset]) / length(species.2[[x]][species.2[[x]] %in% subset])) )))
} else {
DI <- lapply(seq_along(conserved), function(x) 1 - sqrt( (1 - (length(conserved[[x]][!(conserved[[x]] %in% subset)]) / length(species.1[[x]][!(species.1[[x]] %in% subset)]))) * (1 - (length(conserved[[x]][!(conserved[[x]] %in% subset)]) / length(species.2[[x]][!(species.2[[x]] %in% subset)])) ) ))
}
}
names(DI) <- names
return(DI)
}
## For Clusters
trin.SI.Clusters <- calcDriftIndex(species.1 = trinarized.exp$cluster.zebrafish, species.2 = trinarized.exp$cluster.astyanax)
SI <- data.frame(Cluster = names(trin.SI.Clusters), values = unlist(trin.SI.Clusters))
trin.SI.Clusters.ast <- calcDriftIndex(species.1 = trinarized.exp$cluster.zebrafish, species.2 = trinarized.exp$cluster.astyanax)
SI.ast <- data.frame(Cluster = c(names(unlist(trin.SI.Clusters.ast))), values = c(unlist(trin.SI.Clusters.ast)))
## For Subclusters
trin.SI.Subclusters <- calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax)
SI.sub <- data.frame(Subcluster = c(names(unlist(trin.SI.Subclusters))), values = c(unlist(trin.SI.Subclusters)))
trin.SI.Subclusters.ast <- calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax)
SI.ast.sub <- data.frame(Subcluster = c(names(unlist(trin.SI.Subclusters.ast))), values = c(unlist(trin.SI.Subclusters.ast)))
# OK, add Cluster as a column to subcluster df
index <- unique(data.frame(Cluster = hypo.integrated@meta.data$integrated_Cluster, Subcluster = hypo.integrated@meta.data$integrated_Subcluster))
SI.sub$Cluster <- index$Cluster[match(SI.sub$Subcluster, index$Subcluster)]
SI.sub$Cluster <- factor(SI.sub$Cluster, levels = levels(hypo.integrated@meta.data$integrated_Cluster))
index.ast <- unique(tibble(Cluster = hypo.integrated.ast@meta.data$integrated_Cluster, Subcluster = hypo.integrated.ast@meta.data$integrated_Subcluster))
SI.ast.sub$Cluster <- index.ast$Cluster[match(SI.ast.sub$Subcluster, index.ast$Subcluster)]
SI.ast.sub$Cluster <- factor(SI.ast.sub$Cluster, levels = levels(hypo.integrated@meta.data$integrated_Cluster))
# Caculate similarity for only TFs, NPS/NTS etc
# Get Go lists and use only those that are marker genes
go_lists <- list.files("../Seurat_v3_Integration/SCENIC")[grep("GO", list.files("../Seurat_v3_Integration/SCENIC"))]
go_lists <- lapply(paste("../Seurat_v3_Integration/SCENIC/", go_lists, sep = ""), function(x) read.csv(x, head = F))
go_lists <- lapply(go_lists, function(x) unique(x$V2))
names(go_lists) <- list.files("../Seurat_v3_Integration/SCENIC")[grep("GO", list.files("../Seurat_v3_Integration/SCENIC"))]
names(go_lists)
go_lists[[13]] <- Reduce(union, list(go_lists[[5]], go_lists[[6]], go_lists[[9]]))
## Plot Subtypes
SI2 <- tibble(cell_type = c(names(trinarized.exp$subcluster.zebrafish)), all = c(unlist(calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax, invert = F))), TFs = c(unlist(calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax, subset = go_lists[[3]], invert = F))), NP_NTS = c(unlist(calcDriftIndex(species.1 = trinarized.exp$subcluster.zebrafish, species.2 = trinarized.exp$subcluster.astyanax, subset = go_lists[[13]], invert = F))))
SI2 <- SI2[!is.na(SI2$NP_NTS),]
SI.sub.GO <- reshape2::melt(SI2)
SI.sub.GO$variable <- factor(SI.sub.GO$variable, levels = c("all", "NP_NTS", "TFs"))
SI.sub.GO$value[is.infinite(SI.sub.GO$value)] <- 0
## Save
SI.list <- list(SI, SI.sub, SI.ast, SI.ast.sub, SI.sub.GO)
names(SI.list) <- c("SI", "SI.sub", "SI.ast", "SI.ast.sub", "SI.sub.GO")
calcDriftIndex2 <- function(cell_type1 = cell_type1, cell_type2 = cell_type2) {
cell_type1 <- names(cell_type1)
cell_type2 <- names(cell_type2)
index <- intersect(cell_type1, cell_type2)
DI <- 1 - sqrt( abs( (1 - (length(index) / length(cell_type1))) * (1 - (length(df) / length(cell_type2))) ) )
return(DI)
}
matrix.zeb <- list()
for (i in 1:length(trinarized.exp$cluster.zebrafish)) {
matrix.zeb[[i]] <- lapply(trinarized.exp$cluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$cluster.zebrafish[[i]], cell_type2 = x))
}
SI.list[[6]] <- matrix.zeb
matrix.ast <- list()
for (i in 1:length(trinarized.exp$cluster.astyanax)) {
matrix.ast[[i]] <- lapply(trinarized.exp$cluster.astyanax, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$cluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[7]] <- matrix.ast
matrix.zeb.sub <- list()
for (i in 1:length(trinarized.exp$subcluster.zebrafish)) {
matrix.zeb.sub[[i]] <- lapply(trinarized.exp$subcluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$subcluster.zebrafish[[i]], cell_type2 = x))
}
SI.list[[8]] <- matrix.zeb.sub
matrix.ast.sub <- list()
for (i in 1:length(trinarized.exp$subcluster.astyanax)) {
matrix.ast.sub[[i]] <- lapply(trinarized.exp$subcluster.astyanax, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$subcluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[9]] <- matrix.ast.sub
matrix.ast2zeb <- list()
for (i in 1:length(trinarized.exp$cluster.astyanax)) {
matrix.ast2zeb[[i]] <- lapply(trinarized.exp$cluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$cluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[10]] <- matrix.ast2zeb
matrix.ast2zeb.sub <- list()
for (i in 1:length(trinarized.exp$subcluster.astyanax)) {
matrix.ast2zeb.sub[[i]] <- lapply(trinarized.exp$subcluster.zebrafish, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$subcluster.astyanax[[i]], cell_type2 = x))
}
SI.list[[11]] <- matrix.ast2zeb.sub
names(SI.list) <- c("SI", "SI.sub", "SI.ast", "SI.ast.sub", "SI.sub.GO", "SI.zeb2zeb", "SI.ast2ast", "SI.zeb2zeb.sub", "SI.ast2ast.sub", "SI.ast2zeb", "SI.ast2zeb.sub")
# a = 1.5
# b = 2
# f = 0.35
#
# SI.list <- readRDS(file = paste("SI_trinarized_a",a,"_b",b, "_f",f,".rds", sep = ""))
#
## Make non row-scaled heatmap
matrix.ast2zeb.sub <- SI.list[[11]]
# matrix.ast2zeb.sub <- hk.rm.11.035
names(matrix.ast2zeb.sub) <- names(matrix.ast2zeb.sub[[1]])
matrix2 <- reshape2::melt(matrix.ast2zeb.sub)
matrix2$L1 <- unlist(lapply(names(matrix.ast2zeb.sub), function(x) rep(x, 151)))
matrix2$L1 <- factor(matrix2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
matrix2$L2 <- factor(matrix2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix <- ggplot(matrix2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + scale_fill_viridis(direction = 1)
DI.matrix
head(matrix2)
View(matrix2)
## Make row-scaled heatmap
test <- lapply(matrix.ast2zeb.sub, function(x) unlist(x))
# test <- lapply(test, function(x) 1-x)
test2 <- lapply(test, function(x) x/max(x))
test2 <- reshape2::melt(test2)
test2$L2 <- rep(names(matrix.ast2zeb.sub[[1]]),151)
test2$L1 <- factor(test2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
test2$L2 <- factor(test2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix.scaled <- ggplot(test2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8)) + scale_fill_viridis(direction = 1)
DI.matrix.scaled
View(test2)
str(trinarized.exp, max.level = 1)
str(trinarized.exp$subcluster.zebrafish, max.level = 1)
length(trinarized.exp$subcluster.zebrafish$Neuronal_07_4)
length(trinarized.exp$subcluster.astyanax$Neuronal_07_4)
length(matrix.ast2zeb.sub)
length(matrix.ast2zeb.sub[[1]])
head(matrix.ast2zeb.sub[[1]])
head(matrix.ast2zeb.sub$Neuronal_07_4)
lenth(test)
length(test)
length(test[[1]])
head(test[[1]])
names(test)
test <- test[!(names(test) %in% "Neuronal_07_04")]
length(test)
!(names(test) %in% "Neuronal_07_04")
test <- test[!(names(test) %in% "Neuronal_07_4")]
length(test)
# test <- lapply(test, function(x) 1-x)
test2 <- lapply(test, function(x) x/max(x))
test2 <- reshape2::melt(test2)
test2$L2 <- rep(names(matrix.ast2zeb.sub[[1]]),151)
test2$L1 <- factor(test2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
test2$L2 <- factor(test2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix.scaled <- ggplot(test2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8)) + scale_fill_viridis(direction = 1)
DI.matrix.scaled
# test <- lapply(test, function(x) 1-x)
test2 <- lapply(test, function(x) x/max(x))
test2 <- reshape2::melt(test2)
test2$L2 <- rep(names(matrix.ast2zeb.sub[[1]]),150)
test2$L1 <- factor(test2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
test2$L2 <- factor(test2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix.scaled <- ggplot(test2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8)) + scale_fill_viridis(direction = 1)
DI.matrix.scaled
dim(test2)
dim(matrix2)
## Make row-scaled heatmap
test <- lapply(matrix.ast2zeb.sub, function(x) unlist(x))
# test <- test[!(names(test) %in% "Neuronal_07_4")] # this gets rid of the astyanax cluster (row, not column)
# test <- lapply(test, function(x) 1-x)
test2 <- lapply(test, function(x) x/max(x))
test2 <- reshape2::melt(test2)
head(test2)
test2$L2 <- rep(names(matrix.ast2zeb.sub[[1]]),151)
head(test2)
test2 <- test2[!(test2$L2 == "Neuronal_07_4"),]
dim(test2)
test2$L1 <- factor(test2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
test2$L2 <- factor(test2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix.scaled <- ggplot(test2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8)) + scale_fill_viridis(direction = 1)
DI.matrix.scaled
## Make row-scaled heatmap
test <- lapply(matrix.ast2zeb.sub, function(x) unlist(x))
length(test)
head(test[[1]])
test <- lapply(test, function(x) x[!(names(x) %in% "Neuronal_07_4")])
length(test[[1]])
# test <- test[!(names(test) %in% "Neuronal_07_4")] # this gets rid of the astyanax cluster (row, not column)
# test <- lapply(test, function(x) 1-x)
test2 <- lapply(test, function(x) x/max(x))
test2 <- reshape2::melt(test2)
test2$L2 <- rep(names(matrix.ast2zeb.sub[[1]]),150)
# test2 <- test2[!(test2$L2 == "Neuronal_07_4"),] # removes the column, but only after normalisation
test2$L1 <- factor(test2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
test2$L2 <- factor(test2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix.scaled <- ggplot(test2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8)) + scale_fill_viridis(direction = 1)
DI.matrix.scaled
## Make row-scaled heatmap
test <- lapply(matrix.ast2zeb.sub, function(x) unlist(x))
length(test)
length(test[[1]])
test <- lapply(test, function(x) x[!(names(x) %in% "Neuronal_07_4")])
length(test[[1]])
names(test[[1]])
# test <- test[!(names(test) %in% "Neuronal_07_4")] # this gets rid of the astyanax cluster (row, not column)
# test <- lapply(test, function(x) 1-x)
test2 <- lapply(test, function(x) x/max(x))
test2 <- reshape2::melt(test2)
test2$L2 <- rep(names(test[[1]]),150)
test2$L2 <- rep(names(test[[1]]),151)
# test2 <- test2[!(test2$L2 == "Neuronal_07_4"),] # removes the column, but only after normalisation
test2$L1 <- factor(test2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
test2$L2 <- factor(test2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix.scaled <- ggplot(test2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8)) + scale_fill_viridis(direction = 1)
DI.matrix.scaled
matrix.zeb2ast.sub <- list()
for (i in 1:length(trinarized.exp$subcluster.zebrafish)) {
matrix.zeb2ast.sub[[i]] <- lapply(trinarized.exp$subcluster.astyanax, function(x) calcDriftIndex2(cell_type1 = trinarized.exp$subcluster.zebrafish[[i]], cell_type2 = x))
}
SI.list[[12]] <- matrix.zeb2ast.sub
matrix.ast2zeb.sub <- SI.list[[12]]
# matrix.ast2zeb.sub <- hk.rm.11.035
names(matrix.ast2zeb.sub) <- names(matrix.ast2zeb.sub[[1]])
matrix2 <- reshape2::melt(matrix.ast2zeb.sub)
matrix2$L1 <- unlist(lapply(names(matrix.ast2zeb.sub), function(x) rep(x, 151)))
matrix2$L1 <- factor(matrix2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
matrix2$L2 <- factor(matrix2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix <- ggplot(matrix2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + scale_fill_viridis(direction = 1)
## Make row-scaled heatmap
test <- lapply(matrix.ast2zeb.sub, function(x) unlist(x))
# test <- lapply(test, function(x) x[!(names(x) %in% "Neuronal_07_4")]) # removes the zeb subcluster from each of the astyanax subcluster lists
# test <- test[!(names(test) %in% "Neuronal_07_4")] # this gets rid of the astyanax cluster (row, not column)
# test <- lapply(test, function(x) 1-x)
test2 <- lapply(test, function(x) x/max(x))
test2 <- reshape2::melt(test2)
test2$L2 <- rep(names(test[[1]]),151)
# test2 <- test2[!(test2$L2 == "Neuronal_07_4"),] # removes the column, but only after normalisation
test2$L1 <- factor(test2$L1, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
test2$L2 <- factor(test2$L2, levels = levels(hypo.integrated@meta.data$integrated_Subcluster))
DI.matrix.scaled <- ggplot(test2, aes(x = L2, y = L1, fill = value)) + geom_tile() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text = element_text(size = 8)) + scale_fill_viridis(direction = 1)
dev.new()
DI.matrix + DI.matrix.scaled
library(dplyr)
library(tidyr)
library(Seurat)
# Load files
setwd("/Volumes/BZ/Home/gizevo30/R_Projects/Cavefish_Paper/Seurat_v3_Integration/")
# Set hyperparameters
a = 1.5
b = 2
f = 0.1
## Load trinarized gene lists
trinarized.genes <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,".rds", sep = ""))
trinarized.exp <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = ""))
# Find housekeeping genes
trinarized.hk <- trinarized.genes
hk <- list()
trinarized.hk$cluster.zebrafish <- Reduce(cbind, trinarized.hk$cluster.zebrafish)
trinarized.hk$cluster.zebrafish <- trinarized.hk$cluster.zebrafish > 0.95
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))]
trinarized.hk$cluster.astyanax <- Reduce(cbind, trinarized.hk$cluster.astyanax)
trinarized.hk$cluster.astyanax <- trinarized.hk$cluster.astyanax > 0.95
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))]
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) length(x[x]) > length(x)*.4)]
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) length(x[x]) > length(x)*.4)]
## Calculate housekeeping SI
Gt <- length(intersect(names(hk[[1]][hk[[1]]]), names(hk[[2]][hk[[2]]])))
Ga <- length(names(hk[[1]][hk[[1]]]))
Gb <- length(names(hk[[2]][hk[[2]]]))
1 - sqrt( ( 1 - Gt/Ga) * (1 - Gt/Gb) )
rm(trinarized.hk)
# Remove from lists
trinarized.exp[c(1,5,7)] <- lapply(trinarized.exp[c(1,5,7)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[1]]))]))
trinarized.exp[c(2:4,6,8:10)] <- lapply(trinarized.exp[c(2:4,6,8:10)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[1]]))]))
paste("trinarized_expression_hk-filtered_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = "")
saveRDS(trinarized.exp, file = paste("trinarized_expression_hk-filtered_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = ""))
f = 0.2
## Load trinarized gene lists
trinarized.genes <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,".rds", sep = ""))
trinarized.exp <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = ""))
# Find housekeeping genes
trinarized.hk <- trinarized.genes
hk <- list()
trinarized.hk$cluster.zebrafish <- Reduce(cbind, trinarized.hk$cluster.zebrafish)
trinarized.hk$cluster.zebrafish <- trinarized.hk$cluster.zebrafish > 0.95
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))]
trinarized.hk$cluster.astyanax <- Reduce(cbind, trinarized.hk$cluster.astyanax)
trinarized.hk$cluster.astyanax <- trinarized.hk$cluster.astyanax > 0.95
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))]
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) length(x[x]) > length(x)*.4)]
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) length(x[x]) > length(x)*.4)]
## Calculate housekeeping SI
Gt <- length(intersect(names(hk[[1]][hk[[1]]]), names(hk[[2]][hk[[2]]])))
Ga <- length(names(hk[[1]][hk[[1]]]))
Gb <- length(names(hk[[2]][hk[[2]]]))
1 - sqrt( ( 1 - Gt/Ga) * (1 - Gt/Gb) )
rm(trinarized.hk)
# Remove from lists
trinarized.exp[c(1,5,7)] <- lapply(trinarized.exp[c(1,5,7)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[1]]))]))
trinarized.exp[c(2:4,6,8:10)] <- lapply(trinarized.exp[c(2:4,6,8:10)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[1]]))]))
# Save out housekeeping filtered trinarized expression
saveRDS(trinarized.exp, file = paste("trinarized_expression_hk-filtered_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = ""))
f = 0.35
f = 0.35
## Load trinarized gene lists
trinarized.genes <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,".rds", sep = ""))
trinarized.exp <- readRDS(file = paste("trinarized_expression_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = ""))
# Find housekeeping genes
trinarized.hk <- trinarized.genes
hk <- list()
trinarized.hk$cluster.zebrafish <- Reduce(cbind, trinarized.hk$cluster.zebrafish)
trinarized.hk$cluster.zebrafish <- trinarized.hk$cluster.zebrafish > 0.95
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))]
trinarized.hk$cluster.astyanax <- Reduce(cbind, trinarized.hk$cluster.astyanax)
trinarized.hk$cluster.astyanax <- trinarized.hk$cluster.astyanax > 0.95
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))]
hk[[1]] <- apply(trinarized.hk$cluster.zebrafish, 1, function(x) all(x))[apply(trinarized.hk$cluster.zebrafish, 1, function(x) length(x[x]) > length(x)*.4)]
hk[[2]] <- apply(trinarized.hk$cluster.astyanax, 1, function(x) all(x))[apply(trinarized.hk$cluster.astyanax, 1, function(x) length(x[x]) > length(x)*.4)]
## Calculate housekeeping SI
Gt <- length(intersect(names(hk[[1]][hk[[1]]]), names(hk[[2]][hk[[2]]])))
Ga <- length(names(hk[[1]][hk[[1]]]))
Gb <- length(names(hk[[2]][hk[[2]]]))
1 - sqrt( ( 1 - Gt/Ga) * (1 - Gt/Gb) )
rm(trinarized.hk)
# Remove from lists
trinarized.exp[c(1,5,7)] <- lapply(trinarized.exp[c(1,5,7)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[1]]))]))
trinarized.exp[c(2:4,6,8:10)] <- lapply(trinarized.exp[c(2:4,6,8:10)], function(y) lapply(y, function(x) x[!(names(x) %in% names(hk[[1]]))]))
# Save out housekeeping filtered trinarized expression
saveRDS(trinarized.exp, file = paste("trinarized_expression_hk-filtered_a",a,"_b",b, "_f",f,"_cutoff.rds", sep = ""))
